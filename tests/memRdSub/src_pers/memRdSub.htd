////////////////////////////////////////////////////
// RdSub Module
#define WS_HTID_W 2

typedef sc_uint<48> MemAddr_t;

dsnInfo.AddModule(name=RdSub, htIdW=WS_HTID_W);
RdSub.AddInst(name=WS_READ);
RdSub.AddInst(name=WS_RETURN);

RdSub.AddPrivate()
	.AddVar(type=MemAddr_t, name=rdAddr)
	.AddVar(type=uint64_t, name=expected)
	.AddVar(type=ht_uint3, name=rdType)
	.AddVar(type=ht_uint6, name=rdGrpId)
	;

RdSub.AddEntry(func=RdSub, inst=WS_READ, host=true)
	.AddParam(hostType=uint64_t, type=MemAddr_t, name=rdAddr)
	.AddParam(type=uint64_t, name=expected)
	.AddParam(hostType=uint8_t, type=ht_uint3, name=rdType)
	;

RdSub.AddShared()
	.AddVar(name=actual, type=uint64_t, dimen1=1<<WS_HTID_W);

RdSub.AddReturn(func=RdSub)
	.AddParam(type=uint64_t, name=actual)
	.AddParam(type=uint64_t, name=expected)
	;

RdSub.AddReadMem(maxBw=true)//, rspGrpId=rdGrpId)
	.AddDst(name=uint8, var=actual[], memSrc=host, rdType=uint8_t)
	.AddDst(name=uint16, var=actual[], memSrc=host, rdType=uint16_t)
	.AddDst(name=uint32, var=actual[], memSrc=host, rdType=uint32_t)
	.AddDst(name=uint64, var=actual[], memSrc=host, rdType=uint64_t)
	.AddDst(name=int8, var=actual[], memSrc=host, rdType=int8_t)
	.AddDst(name=int16, var=actual[], memSrc=host, rdType=int16_t)
	.AddDst(name=int32, var=actual[], memSrc=host, rdType=int32_t)
	.AddDst(name=int64, var=actual[], memSrc=host, rdType=int64_t)
	;
