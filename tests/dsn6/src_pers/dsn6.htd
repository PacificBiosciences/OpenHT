////////////////////////////////////////////////////
// Inc Module
#define INC_HTID_W 5
typedef sc_uint<INC_INSTR_W> IncInst_t;
typedef sc_uint<INC_HTID_W> IncHtId_t;
typedef sc_uint<2> ReqCnt_t;
typedef sc_uint<8> ElemCnt_t;

struct CTwoFld {
	uint64_t fld1;
	uint64_t fld2;
};


dsnInfo.AddModule(name=inc, htIdW=INC_HTID_W);
inc.AddInstr(name=INC_INIT);
inc.AddInstr(name=INC_READ);
inc.AddInstr(name=INC_WRITE);

inc.AddHostMsg(dir=in, name=SU_ARRAY_ADDR)
	.AddDst(var=arrayAddr, dataLsb=0)
	;

inc.AddPrivate()
	.AddVar(type=ElemCnt_t, name=elemCnt)
	.AddVar(type=ElemCnt_t, name=loopCnt)
	.AddVar(type=ReqCnt_t, name=reqCnt)
	.AddVar(type=IncHtId_t, name=arrayMemRdPtr)
	;

inc.AddShared()
	.AddVar(type=ht_uint48, name=arrayAddr)
	;

inc.AddEntry(func=htmain, instr=INC_INIT, host=true)
	.AddParam(hostType=uint32_t, type=ElemCnt_t, name=elemCnt)
	;
inc.AddReturn(func=htmain)
	.AddParam(hostType=uint32_t, type=ElemCnt_t, name=elemCnt)
	;

inc.AddReadMem()
	.AddDst(name=arrayMem1Fld1, var=arrayMem1().fld1)
	.AddDst(name=arrayMem1Fld2, var=arrayMem1().fld2)
	.AddDst(name=arrayMem2Fld1, var=arrayMem2().fld1)
	.AddDst(name=arrayMem2Fld2, var=arrayMem2().fld2)
	;

inc.AddWriteMem();

inc.AddGlobal()
	.AddVar(type=CTwoFld, name=arrayMem1, addr1=arrayMemRdPtr, instrRead=true)
	.AddVar(type=CTwoFld, name=arrayMem2, addr1=arrayMemRdPtr, instrRead=true)
	;
