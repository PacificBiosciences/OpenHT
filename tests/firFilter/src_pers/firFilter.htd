////////////////////////////////////////////////////
// Top-level - Sends/Receives Data from the Host, Dispatches threads to go process individual index values

dsnInfo.AddModule(name=ctl, htIdW=0);

ctl.AddInstr(name=CTL_ENTRY);
ctl.AddInstr(name=CTL_RECV);
ctl.AddInstr(name=CTL_SEND);
ctl.AddInstr(name=CTL_RTN);


ctl.AddPrivate()
	.AddVar(type=uint32_t, name=rcvAu)
	.AddVar(type=int32_t, name=lastIdx)
	.AddVar(type=uint32_t, name=rcvIdx)
	.AddVar(type=uint32_t, name=sndIdx)
	.AddVar(type=uint32_t, name=errs)
	.AddVar(type=uint32_t, name=errRcv)
	;

ctl.AddEntry(func=htmain, instr=CTL_ENTRY, host=true)
	.AddParam(type=uint32_t, name=rcvAu)
	.AddParam(type=int32_t, name=lastIdx)
	;

ctl.AddReturn(func=htmain)
	.AddParam(type=uint32_t, name=errs)
	;

ctl.AddCall(func=process, fork=true);


ctl.AddHostData(dir=in);
ctl.AddHostData(dir=out);


////////////////////////////////////////////////////
// Dispatches multiply operations over a single index

#define PROCESS_W 4
typedef ht_uint48 MemAddr_t;

dsnInfo.AddModule(name=process, htIdW=PROCESS_W);

process.AddInstr(name=PROCESS_ENTRY);
process.AddInstr(name=PROCESS_JOIN);
process.AddInstr(name=PROCESS_STORE);
process.AddInstr(name=PROCESS_RTN);

process.AddHostMsg(dir=in, name=OUTPUT_BASE)
	.AddDst(var=outAddrBase)
	;
process.AddHostMsg(dir=in, name=NUM_TAPS)
	.AddDst(var=numTaps)
	;


process.AddShared()
	.AddVar(type=MemAddr_t, name=outAddrBase)
	.AddVar(type=uint32_t, name=numTaps)
	;

process.AddPrivate()
	.AddVar(type=uint32_t, name=rcvIdx)
	.AddVar(type=uint32_t, name=calcLen)
	.AddVar(type=uint32_t, name=calcIdx)
	.AddVar(type=uint32_t, name=errs)
	.AddVar(type=uint32_t, name=errRcv)
	.AddVar(type=int64_t, name=result)
	.AddVar(type=int64_t, name=sum)
	;

process.AddEntry(func=process, instr=PROCESS_ENTRY)
	.AddParam(type=uint32_t, name=rcvIdx)
	;

process.AddReturn(func=process)
	.AddParam(type=uint32_t, name=sndIdx)
	.AddParam(type=uint32_t, name=errRcv)
	;

process.AddCall(func=mult, fork=true);


process.AddWriteMem();


////////////////////////////////////////////////////
// Performs a single muliply operation, returning the result

#define MULT_W 4
typedef ht_uint48 MemAddr_t;

dsnInfo.AddModule(name=mult, htIdW=MULT_W);

mult.AddInstr(name=MULT_LD1);
mult.AddInstr(name=MULT_LD2);
mult.AddInstr(name=MULT_CALC);
mult.AddInstr(name=MULT_RTN);

mult.AddHostMsg(dir=in, name=COEFF_BASE)
	.AddDst(var=cofAddrBase)
	;
mult.AddHostMsg(dir=in, name=INPUT_BASE)
	.AddDst(var=inAddrBase)
	;


mult.AddShared()
	.AddVar(type=MemAddr_t, name=cofAddrBase)
	.AddVar(type=MemAddr_t, name=inAddrBase)
	.AddVar(type=int64_t, name=op1Mem, addr1W=MULT_W)
	.AddVar(type=int64_t, name=op2Mem, addr1W=MULT_W)
	;

mult.AddPrivate()
	.AddVar(type=uint32_t, name=rcvIdx)
	.AddVar(type=uint32_t, name=calcIdx)
	.AddVar(type=int32_t, name=op1)
	.AddVar(type=int32_t, name=op2)
	.AddVar(type=int64_t, name=result)
	.AddVar(type=uint32_t, name=errs)
	;

mult.AddStage(privWrStg=6, execStg=1)
	;

mult.AddEntry(func=mult, instr=MULT_LD1)
	.AddParam(type=uint32_t, name=rcvIdx)
	.AddParam(type=uint32_t, name=calcIdx)
	;

mult.AddReturn(func=mult)
	.AddParam(type=int64_t, name=result)
	.AddParam(type=uint32_t, name=errRcv)
	;

mult.AddReadMem()
	.AddDst(var=op1Mem())
	.AddDst(var=op2Mem(#))
	;

mult.AddPrimState(type=mult_prm_state, name=mult_prm_state1, include="PersMult_prim.h");
