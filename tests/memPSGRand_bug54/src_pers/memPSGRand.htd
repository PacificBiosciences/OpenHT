typedef sc_uint<48> MemAddr_t;

struct testStr {
  ht_uint2 rdAddr1;
  ht_uint4 rdAddr2;
};


/////////////////////////////////////
// CTL

dsnInfo.AddModule(name=Ctl, htIdW=0);

Ctl.AddInstr(name=CTL_TEST00);
Ctl.AddInstr(name=CTL_RTN);

Ctl.AddEntry(func=main, instr=CTL_TEST00, host=true)
	.AddParam(hostType=uint64_t *, type=MemAddr_t, name=memAddr)
	;

Ctl.AddReturn(func=main)
	;

Ctl.AddCall(func=test00);

Ctl.AddPrivate()
	.AddVar(type=MemAddr_t, name=memAddr)
	;


/////////////////////////////////////
// TEST00

#define TEST00_HTID_W 0
dsnInfo.AddModule(name=Test00, htIdW=TEST00_HTID_W);

Test00.AddInstr(name=TEST00_ENTRY);
Test00.AddInstr(name=TEST00_WR);
Test00.AddInstr(name=TEST00_ST0);
Test00.AddInstr(name=TEST00_LD0);
Test00.AddInstr(name=TEST00_CHK);
Test00.AddInstr(name=TEST00_RTN);

Test00.AddEntry(func=test00, instr=TEST00_ENTRY)
	.AddParam(hostType=uint64_t *, type=MemAddr_t, name=memAddr)
	;

Test00.AddReturn(func=test00)
	;

Test00.AddStage(execStg=3, privWrStg=4)
	.AddVar(type=testStr, name=str, range=1-4)
	;

Test00.AddPrivate()
	.AddVar(type=MemAddr_t, name=memAddr)
	;

Test00.AddGlobal()
	.AddVar(type=uint64_t, name=test00_0_src_v0_data, addr1=str.rdAddr1, addr2=str.rdAddr2, rdStg=3, instrRead=true, instrWrite=true)
	;

Test00.AddReadMem()
	.AddDst(var=test00_0_src_v0_data(#,#), name=test00_0_src_v0_data, memSrc=host)
	;

Test00.AddWriteMem()
	.AddSrc(var=test00_0_src_v0_data(#,#), name=test00_0_src_v0_data, memDst=host)
	;


