#include "SrcHdr.h"

#pragma message "  __SEED__ " __SEED__
#ifdef _WIN32
#define TEST 0x12997c
//#define TEST __RANDOM__
#else
//#define TEST 0x3
#define TEST __RANDOM__
#endif
#pragma message "  TEST = " TEST

#if (TEST&3) == 0
#define VADD_TYPE 0
typedef ht_uint8 PersType_t;
#elif (TEST&3) == 1
#define VADD_TYPE 1
typedef ht_uint16 PersType_t;
#elif (TEST&3) == 2
#define VADD_TYPE 2
typedef ht_uint32 PersType_t;
#else
#define VADD_TYPE 3
typedef ht_uint64 PersType_t;
#endif
#pragma message "  VADD_TYPE = " VADD_TYPE

#if (TEST&4) == 0
#define CLK_RATE 1x
#else
#define CLK_RATE 2x
#endif
#pragma message "  CLK_RATE = " CLK_RATE

#define VADD_HTID_W ((TEST>>3)&3)
#pragma message "  VADD_HTID_W = " VADD_HTID_W

#define STRM_BW_A ((((TEST>>5)&0xf)%10)+1)
#pragma message "  STRM_BW_A = " STRM_BW_A

#define STRM_BW_B ((((TEST>>9)&0xf)%10)+1)
#pragma message "  STRM_BW_B = " STRM_BW_B

#ifdef HT_SYSC
#define PLATFORM (((TEST>>13)&0xf)%6)
#if PLATFORM == 0
#define __PLATFORM__ "wx-690"
#elif PLATFORM == 1
#define __PLATFORM__ "wx-2000"
#elif PLATFORM == 2
#define __PLATFORM__ "hc-2"
#elif PLATFORM == 3
#define __PLATFORM__ "hc-2ex"
#elif PLATFORM == 4
#define __PLATFORM__ "hc-1"
#elif PLATFORM == 5
#define __PLATFORM__ "hc-1ex"
#endif
#pragma message "  PLATFORM = " __PLATFORM__
#endif

#if ((TEST>>17)&1) == 0
#define PIPE_LEN 0
#else
#define PIPE_LEN ((TEST>>18)&0x1f)
#endif
#pragma message "  PIPE_LEN = " PIPE_LEN

#define XDIM_LEN (((TEST>>23)&0x3f)%64)
#pragma message "  XDIM_LEN = " XDIM_LEN

#define TYPE_SIZE 1<<VADD_TYPE

////////////////////////////////////////////////////
// Streaming implementation of vadd

typedef ht_uint48 MemAddr_t;

dsnInfo.AddModule(name=vadd, htIdW=VADD_HTID_W, reset=VADD_RESET, clock=CLK_RATE);

vadd.AddInstr(name=VADD_RESET);
vadd.AddInstr(name=VADD_ENTER);
vadd.AddInstr(name=VADD_OPEN);
vadd.AddInstr(name=VADD_RETURN);

vadd.AddHostMsg(dir=in, name=OP1_ADDR)
	.AddDst(var=addrOp1)
	;
vadd.AddHostMsg(dir=in, name=OP2_ADDR)
	.AddDst(var=addrOp2)
	;
vadd.AddHostMsg(dir=in, name=RES_ADDR)
	.AddDst(var=addrRes)
	;

vadd.AddHostMsg(dir=out, name=VADD_TYPE_SIZE);

vadd.AddPrivate()
	.AddVar(type=ht_uint32, name=addrOff)
	.AddVar(type=ArrayIdx_t, name=yDimLen)
	.AddVar(type=ArrayIdx_t, name=xDimLen)
	.AddVar(type=ArrayIdx_t, name=yOpenAIdx)
	.AddVar(type=ArrayIdx_t, name=yOpenBIdx)
	.AddVar(type=ArrayIdx_t, name=yOpenCIdx)
	.AddVar(type=bool, name=yOpenADone)
	.AddVar(type=bool, name=yOpenBDone)
	.AddVar(type=bool, name=yOpenCDone)
	;

vadd.AddShared()
	.AddVar(type=ht_uint10, name=msgDelay)
	.AddVar(type=MemAddr_t, name=addrOp1, reset=false)
	.AddVar(type=MemAddr_t, name=addrOp2, reset=false)
	.AddVar(type=MemAddr_t, name=addrRes, reset=false)
	.AddVar(type=MemAddr_t, name=addrA, reset=false)
	.AddVar(type=MemAddr_t, name=addrB, reset=false)
	.AddVar(type=MemAddr_t, name=addrC, reset=false)
	.AddVar(type=MemAddr_t, name=addrA_op, reset=false)
	.AddVar(type=MemAddr_t, name=addrB_op, reset=false)
	.AddVar(type=MemAddr_t, name=addrC_op, reset=false)
	.AddVar(type=ArrayIdx_t, name=yIdx, reset=false)
	.AddVar(type=ArrayIdx_t, name=xIdx, reset=false)
	.AddVar(type=ArrayIdx_t, name=xDimLenM1, reset=false)
	.AddVar(type=ArrayIdx_t, name=yDimLenM1, reset=false)
	.AddVar(type=bool, name=bEndOfYDim)
	.AddVar(type=ht_uint32, name=sum, reset=false)
	.AddVar(type=ht_uint32, name=sum_op, reset=false)
	;

vadd.AddEntry(func=htmain, instr=VADD_ENTER, host=true)
	.AddParam(hostType=uint32_t, type=ht_uint32, name=addrOff)
	.AddParam(hostType=ArrayIdx_t, type=ArrayIdx_t, name=yDimLen)
	.AddParam(hostType=ArrayIdx_t, type=ArrayIdx_t, name=xDimLen)
	;

vadd.AddReturn(func=htmain)
	.AddParam(hostType=uint32_t, type=ht_uint32, name=sum)
	;

vadd.AddReadStream(name=A, type=PersType_t, strmBw=STRM_BW_A, memPort=0, elemCntW=16, tag=ArrayIdx_t);
vadd.AddReadStream(name=B, type=PersType_t, strmBw=STRM_BW_B, memPort=1, elemCntW=16);
vadd.AddWriteStream(name=C, type=PersType_t, memPort=2, elemCntW=16, reserve=PIPE_LEN);
